import { type NextPage } from "next";
import { Tweet } from "@prisma/client";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import CreateTweet from "../components/CreateTweet";
import { v4 } from "uuid";
import Body from "../components/Body";
import { Ring } from "@uiball/loaders";
import Loader from "../components/Loader";
import TweetList from "../components/TweetList";
import NavFeed from "../components/NavFeed";
import useRetweet from "../../hooks/useRetweet";
import useScrollPosition from "../../hooks/useScrollPosition";
import { useEffect } from "react";

const Home: NextPage = () => {
  const scrollPosition = useScrollPosition();
  console.log(scrollPosition);
  const { data, isLoading, isFetching, hasNextPage, fetchNextPage } =
    trpc.tweet.getInfiniteTweets.useInfiniteQuery(
      {
        limit: 4,
      },
      {
        getNextPageParam: (lastPage) => lastPage.nextCursor,
      }
    );

  useEffect(() => {
    if (scrollPosition > 90 && hasNextPage && !isFetching) {
      fetchNextPage();
    }
  }, [scrollPosition, isFetching, hasNextPage, fetchNextPage]);

  console.log(data);
  const tweets = data?.pages.flatMap((page) => page.tweets) ?? [];

  const { data: session, status } = useSession();

  return (
    <>
      <Head>
        <title>Home / Twitter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Body>
        <NavFeed title="Home" />
        {status === "authenticated" ? <CreateTweet /> : null}
        {isLoading ? (
          <Loader />
        ) : (
          <>
            <TweetList tweets={tweets as Tweet[]} />
          </>
        )}
      </Body>
      {isFetching && hasNextPage ? <Loader /> : null}
      { !hasNextPage ? (
        <p className="text-center text-gray-500">End of feed</p>
      ) : null}
    </>
  );
};

export default Home;
